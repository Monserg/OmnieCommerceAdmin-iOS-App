//
//  SignInContainerShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 04.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol SignInContainerShowViewControllerInput {
    func displaySomething(viewModel: SignInContainerShow.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol SignInContainerShowViewControllerOutput {
    func doSomething(requestModel: SignInContainerShow.Something.Request)
}

class SignInContainerShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: SignInContainerShowViewControllerOutput!
    var router: SignInContainerShowRouter!
    var handlerRegisterButtonCompletion: HandlerRegisterButtonCompletion?
    var handlerForgotPasswordButtonCompletion: HandlerForgotPasswordButtonCompletion?
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SignInContainerShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // NOTE: Ask the Interactor to do some work
        let requestModel = SignInContainerShow.Something.Request()
        interactor.doSomething(requestModel: requestModel)
        
        // Delegates
        textFieldsArray = textFieldsCollection
        
        // Apply keyboard handler
        scrollViewBase              =   scrollView
        
        // Setup App background color theme
        view.applyBackgroundTheme()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerRegisterButtonTap(_ sender: CustomButton) {
        handlerRegisterButtonCompletion!()
    }
    
    @IBAction func handlerForgotPasswordButtonTap(_ sender: CustomButton) {
        handlerForgotPasswordButtonCompletion!()
    }
    
    @IBAction func handlerSignInButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run. Sign In button tap.")
    }    
}


// MARK: - SignInContainerShowViewControllerInput
extension SignInContainerShowViewController: SignInContainerShowViewControllerInput {
    func displaySomething(viewModel: SignInContainerShow.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}

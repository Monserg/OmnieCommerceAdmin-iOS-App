//
//  NewsShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 14.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol NewsShowViewControllerInput {
    func displaySomething(viewModel: NewsShowModels.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol NewsShowViewControllerOutput {
    func doSomething(requestModel: NewsShowModels.Something.RequestModel)
}

class NewsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: NewsShowViewControllerOutput!
    var router: NewsShowRouter!
    
    @IBOutlet weak var customNavigationBarView: MainNavigationBarView!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        NewsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // Settings BaseViewController
        navigationBarView = customNavigationBarView
        haveMenuItem = true

        
        // NOTE: Ask the Interactor to do some work
        let requestModel = NewsShowModels.Something.RequestModel()
        interactor.doSomething(requestModel: requestModel)
        
        // Handler left bar button
        customNavigationBarView.handlerNavBarLeftButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
    }
}


// MARK: - ForgotPasswordShowViewControllerInput
extension NewsShowViewController: NewsShowViewControllerInput {
    func displaySomething(viewModel: NewsShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}

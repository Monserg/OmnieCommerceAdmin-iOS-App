//
//  RepetitionPasswordShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 08.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol RepetitionPasswordShowViewControllerInput {
    func displaySomething(viewModel: RepetitionPasswordShowModels.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol RepetitionPasswordShowViewControllerOutput {
    func doSomething(requestModel: RepetitionPasswordShowModels.Something.RequestModel)
}

class RepetitionPasswordShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: RepetitionPasswordShowViewControllerOutput!
    var router: RepetitionPasswordShowRouter!
    var handlerSendButtonCompletion: HandlerSendButtonCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    @IBOutlet weak var passwordStrengthView: PasswordStrengthLevelView!
    @IBOutlet weak var repeatPasswordErrorMessageView: ErrorMessageView!
   
    @IBOutlet weak var repeatPasswordErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var repeatPasswordErrorMessageViewTopConstraint: NSLayoutConstraint!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        RepetitionPasswordShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // UITextFields
        textFieldsArray = textFieldsCollection
        
        // Apply keyboard handler
        scrollViewBase = scrollView
        
        // Hide email error message view
        repeatPasswordErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        repeatPasswordErrorMessageViewTopConstraint.constant = -Config.Constants.errorMessageViewHeight
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSendButtonTap(_ sender: CustomButton) {
        if (textFieldsCollection.first?.text == textFieldsCollection.last?.text) {
            handlerSendButtonCompletion!()
        } else {
            repeatPasswordErrorMessageView.didShow(true, withConstraint: repeatPasswordErrorMessageViewTopConstraint)
        }
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        handlerCancelButtonCompletion!()
    }
}


// MARK: - ForgotPasswordShowViewControllerInput
extension RepetitionPasswordShowViewController: RepetitionPasswordShowViewControllerInput {
    func displaySomething(viewModel: RepetitionPasswordShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}


// MARK: - UITextFieldDelegate
extension RepetitionPasswordShowViewController {
    override func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        repeatPasswordErrorMessageView.didShow(false, withConstraint: repeatPasswordErrorMessageViewTopConstraint)

        if (textField.tag != 99) {
            passwordStrengthView.passwordStrengthLevel = (string.isEmpty && textField.text?.characters.count == 1) ? .None : (textField as! CustomTextField).checkPasswordStrength(textField.text! + string)
            passwordStrengthView.setNeedsDisplay()
        }

        return true
    }
    
    override func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if (textField.tag == 99) {
            if (textFieldsCollection.first?.text == textFieldsCollection.last?.text) {
                textField.resignFirstResponder()
                
                return true
            } else {
                repeatPasswordErrorMessageView.didShow(true, withConstraint: repeatPasswordErrorMessageViewTopConstraint)
                
                return false
            }
        } else {
            let indexCurrent = textFieldsArray.index(of: textField as! CustomTextField)!
            let indexNext = textFieldsArray.index(after: indexCurrent)
            
            textFieldsArray[indexNext].becomeFirstResponder()
        }
        
        return true
    }
    
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        repeatPasswordErrorMessageView.didShow(false, withConstraint: repeatPasswordErrorMessageViewTopConstraint)
        
        return true
    }
}

//
//  OrganizationsShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 14.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationsShowViewControllerInput {
    func displaySomething(viewModel: OrganizationsShowModels.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationsShowViewControllerOutput {
    func doSomething(requestModel: OrganizationsShowModels.Something.RequestModel)
}

class OrganizationsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationsShowViewControllerOutput!
    var router: OrganizationsShowRouter!
    
    @IBOutlet weak var customNavigationBarView: MainNavigationBarView!
    @IBOutlet weak var emptyDataSourceView: UIView!
    
    @IBOutlet weak var tableView: UITableView! {
        didSet {
            // Delegates
            tableView.delegate = self
            tableView.dataSource = self
        }
    }

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // Settings BaseViewController
        navigationBarView = customNavigationBarView
        haveMenuItem = true
        
        // Handler menu bar button
        customNavigationBarView.handlerNavBarLeftButtonCompletion = { _ in
            self.print(object: "Menu item taped!!!")
        }
    }
    
    
    // MARK: - Actions
    @IBAction func handlerAddOrganizationButtonTap(_ sender: CustomButton) {
        router.navigateToOrganizationAddViewController()
    }
}


// MARK: - UITableViewDataSource
extension OrganizationsShowViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let dataSourceCount = 0
        emptyDataSourceView.isHidden = (dataSourceCount == 0) ? false : true
        
        return dataSourceCount
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellIdentifier = "OrganizationCell"
        var cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) //as UITableViewCell
        
        if cell == nil {
            cell = UINib(nibName: cellIdentifier, bundle: nil).instantiate(withOwner: nil, options: nil).first as! UITableViewCell?
        }
        
        return cell!
    }
}


// MARK: - OrganizationsShowViewControllerInput
extension OrganizationsShowViewController: OrganizationsShowViewControllerInput {
    func displaySomething(viewModel: OrganizationsShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}


// MARK: - UITableViewDelegate
extension OrganizationsShowViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 64.0
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
    }
    
    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
        
    }
}

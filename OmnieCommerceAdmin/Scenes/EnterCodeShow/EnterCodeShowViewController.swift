//
//  EnterCodeShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 07.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol EnterCodeShowViewControllerInput {
    func returnValidationResult(viewModel: EnterCodeShowModels.Code.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol EnterCodeShowViewControllerOutput {
    func validateInputCodeFrom(requestModel: EnterCodeShowModels.Code.RequestModel)
}

class EnterCodeShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: EnterCodeShowViewControllerOutput!
    var router: EnterCodeShowRouter!
    
    var isInputCodeValid = false
    
    var handlerSendButtonCompletion: HandlerSendButtonCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    @IBOutlet weak var codeErrorMessageView: ErrorMessageView!
    @IBOutlet weak var sendButton: CustomButton!
    
    @IBOutlet weak var codeErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var codeErrorMessageViewTopConstraint: NSLayoutConstraint!

    
    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        EnterCodeShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // UITextFields
        textFieldsArray = textFieldsCollection
        
        // Apply keyboard handler
        scrollViewBase = scrollView
        
        // Hide email error message view
        codeErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        codeErrorMessageViewTopConstraint.constant = -Config.Constants.errorMessageViewHeight
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSendButtonTap(_ sender: CustomButton) {
        guard let text = textFieldsCollection.last?.text else {
            return
        }
        
        let requestModel = EnterCodeShowModels.Code.RequestModel(inputCode: text)
        interactor.validateInputCodeFrom(requestModel: requestModel)
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        handlerCancelButtonCompletion!()
    }
    
    @IBAction func handlerSendAgainButtonTap(_ sender: CustomButton) {
//        let requestModel = EnterCodeShowModels.Renew.RequestModel(email: <#T##String#>)
//        interactor.validateInputCodeFrom(requestModel: requestModel)
        
    }
    
    
    // MARK: - Gesture
    @IBAction func handlerTapGestureRecognizer(_ sender: UITapGestureRecognizer) {
        view.endEditing(true)
    }
}


// MARK: - ForgotPasswordShowViewControllerInput
extension EnterCodeShowViewController: EnterCodeShowViewControllerInput {
    func returnValidationResult(viewModel: EnterCodeShowModels.Code.ViewModel) {
        // Handler returned result from Presenter
        isInputCodeValid = viewModel.isValueValid
        
        if (isInputCodeValid) {
            handlerSendButtonCompletion!()
        } else {
            codeErrorMessageView.didShow(true, withConstraint: codeErrorMessageViewTopConstraint)
        }
    }
}


// MARK: - UITextFieldDelegate
extension EnterCodeShowViewController {
    override func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        codeErrorMessageView.didShow(false, withConstraint: codeErrorMessageViewTopConstraint)
        
        if (string.isEmpty) {
            return true
        }
        
        guard Int(string) != nil else {
            return false
        }
        
        if ((textField.text! + string).characters.count <= 4) {
            return true
        } else {
            return false
        }
    }
    
    override func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        handlerSendButtonTap(sendButton)
        
        if (isInputCodeValid) {
            textField.resignFirstResponder()
        }
        
        return isInputCodeValid
    }
    
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        codeErrorMessageView.didShow(false, withConstraint: codeErrorMessageViewTopConstraint)
        
        return true
    }
}

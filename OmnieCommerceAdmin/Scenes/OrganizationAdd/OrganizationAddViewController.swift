//
//  OrganizationAddViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 09.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationAddViewControllerInput {
    func didShowOrganizationAvatarImage(viewModel: OrganizationAddModels.Info.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationAddViewControllerOutput {
    func didLoadOrganizationAvatarImage(requestModel: OrganizationAddModels.Info.RequestModel)
}

class OrganizationAddViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationAddViewControllerOutput!
    var router: OrganizationAddRouter!
    
    private var mediaManager: MediaManager!

    // Route data
    var pointAnnotation = PointAnnotation()
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var customNavigationBarView: MainNavigationBarView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    @IBOutlet weak var emailErrorMessageView: ErrorMessageView!
    @IBOutlet weak var phoneErrorMessageView: ErrorMessageView!
    @IBOutlet weak var organizationAvatarButton: CustomButton!

    @IBOutlet weak var emailErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var emailErrorMessageViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var phoneErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var phoneErrorMessageViewTopConstraint: NSLayoutConstraint!
    
    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationAddConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        textFieldsCollection.last?.text = pointAnnotation.subtitle
    }

    
    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {        
        // Set left bar button image
        customNavigationBarView.leftButton.setImage(UIImage.init(named: "icon-navbar-back-normal"), for: .normal)
        
        // UITextFields
        textFieldsArray = textFieldsCollection
        
        // Apply keyboard handler
        scrollViewBase = scrollView

        // Hide email & phone error message views
        emailErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        emailErrorMessageViewTopConstraint.constant = -Config.Constants.errorMessageViewHeight
        phoneErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        phoneErrorMessageViewTopConstraint.constant = -Config.Constants.errorMessageViewHeight

        // Handler left bar button
        customNavigationBarView.handlerNavBarLeftButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
    }
    
    
    // MARK: - Actions
    @IBAction func handlerAvatarButtonTap(_ sender: UIButton) {
        mediaManager = MediaManager(withImagePickerType: .Album)
        mediaManager.didLoadImagePickerController()
        
        // Handler selected image
        mediaManager.handlerImagePickerControllerCompletion = { imageFromAlbum in
            let avatarImage = imageFromAlbum.af_imageAspectScaled(toFill: self.organizationAvatarButton.frame.size)
            
            UIView.animate(withDuration: 0.5) {
                self.pointAnnotation.image = avatarImage
                self.organizationAvatarButton.setImage(avatarImage, for: .normal)
            }

            self.dismiss(animated: true, completion: nil)
        }
        
        // Handler cancel button
        mediaManager.handlerCancelButtonCompletion = { _ in
            self.dismiss(animated: true, completion: nil)
        }
        
        present(mediaManager.imagePicker!, animated: true, completion: nil)
    }
    
    @IBAction func handlerLocationButtonTap(_ sender: CustomButton) {
        view.endEditing(true)
        
        pointAnnotation.didUpdateAnnotation()
        router.navigateToMap()
    }
    
    @IBAction func handlerRegisterButtonTap(_ sender: CustomButton) {
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        _ = self.navigationController?.popViewController(animated: true)
    }
}


// MARK: - OrganizationAddViewControllerInput
extension OrganizationAddViewController: OrganizationAddViewControllerInput {
    func didShowOrganizationAvatarImage(viewModel: OrganizationAddModels.Info.ViewModel) {
//        UIView.animate(withDuration: 0.5) { 
//            self.organizationAvatarButton.setImage(viewModel.avatarImage ?? UIImage.init(named: "icon-empty-organization-normal"), for: .normal)
//        }
    }
}


// MARK: - UITextFieldDelegate
extension OrganizationAddViewController {
    // TextField become first responder
    override func textFieldDidBeginEditing(_ textField: UITextField) {
    }
    
    // // TextField resign first responder
    override func textFieldDidEndEditing(_ textField: UITextField) {
        // Name
        if (textField.tag == 0) {
            pointAnnotation.title = textField.text
        }
        
        // Email
        if (textField.tag == 1) {
            if (!(textField as! CustomTextField).checkEmailValidation(textField.text!)) {
                emailErrorMessageView.didShow(true, withConstraint: emailErrorMessageViewTopConstraint)
            } else {
                emailErrorMessageView.didShow(false, withConstraint: emailErrorMessageViewTopConstraint)
            }
        }
        
        // Phone
        if (textField.tag == 2) {
            if (!(textField as! CustomTextField).checkPhoneValidation(textField.text!)) {
                phoneErrorMessageView.didShow(true, withConstraint: phoneErrorMessageViewTopConstraint)
            } else {
                phoneErrorMessageView.didShow(false, withConstraint: phoneErrorMessageViewTopConstraint)
            }
        }
    }
    
    // Add validation to TextField
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        return true;
    }
    
    // Hide keyboard
    func textFieldShouldEndEditing(_ textField: UITextField) -> Bool {
        return true;
    }
    
    // TextField editing
    override func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        // Email
        if (textField.tag == 1) {
            emailErrorMessageView.didShow(false, withConstraint: emailErrorMessageViewTopConstraint)
        }
        
        // Phone
        if (textField.tag == 2) {
            phoneErrorMessageView.didShow(false, withConstraint: phoneErrorMessageViewTopConstraint)
            
            if (string.isEmpty) {
                return true
            }
            
            guard Int(string) != nil || ((textField.text?.isEmpty)! && string == "+") else {
                return false
            }
        }
        
        return true
    }
    
    // Clear button tap
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        // Email
        if (textField.tag == 1) {
            emailErrorMessageView.didShow(false, withConstraint: emailErrorMessageViewTopConstraint)
        }
        
        // Phone
        if (textField.tag == 2) {
            phoneErrorMessageView.didShow(false, withConstraint: phoneErrorMessageViewTopConstraint)
        }
        
        return true
    }
    
    // Return button tap
    override func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        // Email
        if (textField.tag == 1) {
            if (!(textField as! CustomTextField).checkEmailValidation(textField.text!)) {
                emailErrorMessageView.didShow(true, withConstraint: emailErrorMessageViewTopConstraint)
                
                return false
            } else {
                emailErrorMessageView.didShow(false, withConstraint: emailErrorMessageViewTopConstraint)
            }
        }
        
        // Phone
        if (textField.tag == 2) {
            if (!(textField as! CustomTextField).checkPhoneValidation(textField.text!)) {
                phoneErrorMessageView.didShow(true, withConstraint: phoneErrorMessageViewTopConstraint)
                
                return false
            } else {
                phoneErrorMessageView.didShow(false, withConstraint: phoneErrorMessageViewTopConstraint)
            }
        }
        
        if (textField.tag == 99) {
                textField.resignFirstResponder()
        } else {
            let indexCurrent = textFieldsArray.index(of: textField as! CustomTextField)!
            let indexNext = textFieldsArray.index(after: indexCurrent)
            
            textFieldsArray[indexNext].becomeFirstResponder()
        }
        
        return true
    }
}


//
//  SignUpShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 03.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for Interactor
protocol SignUpShowViewControllerInput {
    func showPasswordTextFieldCheckResult(viewModel: SignUpShowModels.PasswordTextField.ViewModel)
}

// MARK: - Output protocols for current ViewController
protocol SignUpShowViewControllerOutput {
    func validatePasswordTextFieldStrengthFrom(requestModel: SignUpShowModels.PasswordTextField.Request)
}

class SignUpShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: SignUpShowViewControllerOutput!
    var router: SignUpShowRouter!
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SignUpShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // UITextFields
        textFieldsArray = textFieldsCollection
        _ = textFieldsCollection.map{ $0.delegate = self }
        
        // Apply keyboard handler
        scrollViewBase = scrollView

        // Setup App background color theme
        view.applyBackgroundTheme()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerRegisterButtonTap(_ sender: CustomButton) {
        router.navigateToAppMainViewController()
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        handlerCancelButtonCompletion!()
    }
}


// MARK: - SignUpShowViewControllerInput
extension SignUpShowViewController: SignUpShowViewControllerInput {
    func showPasswordTextFieldCheckResult(viewModel: SignUpShowModels.PasswordTextField.ViewModel) {
        print(object: "OK")
    }
}


// MARK: - UITextFieldDelegate
extension SignUpShowViewController {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        // Interactor output
        if (textField.tag == 99) {
            let passwordRequest = SignUpShowModels.PasswordTextField.Request(password: textField.text! + string)
            
            interactor.validatePasswordTextFieldStrengthFrom(requestModel: passwordRequest)
        }
        
        return true
    }
}


//
//  SignInShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 03.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol SignInShowViewControllerInput {
    func displaySomething(viewModel: SignInShow.Something.ViewModel)
}

protocol SignInShowViewControllerOutput {
    func doSomething(request: SignInShow.Something.Request)
}

class SignInShowViewController: BaseViewController, SignInShowViewControllerInput {
    // MARK: - Properties
    var output: SignInShowViewControllerOutput!
    var router: SignInShowRouter!
    
    // Container childVC
    var signInContainerShowVC: SignInContainerShowViewController?
    var signUpShowVC: SignUpShowViewController?
    var forgotPasswordShowVC: ForgotPasswordShowViewController?
    
    var activeViewController: BaseViewController? {
        didSet {
            router.removeInactiveViewController(inactiveViewController: oldValue)
            router.updateActiveViewController()
        }
    }

    @IBOutlet weak var containerView: UIView!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SignInShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    

    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // NOTE: Ask the Interactor to do some work
        let request = SignInShow.Something.Request()
        output.doSomething(request: request)
        
        // Hide navigation bar
        hideNavigationBar()
        
        // Apply Container childVC
        signInContainerShowVC = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "SignInContainerShowVC") as? SignInContainerShowViewController
        
        signInContainerShowVC?.handlerRegisterButtonCompletion = { _ in
            self.signUpShowVC = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "SignUpShowVC") as? SignUpShowViewController
            
            self.signUpShowVC?.handlerCancelButtonCompletion = { _ in
                self.activeViewController = self.signInContainerShowVC
            }
            
            self.activeViewController = self.signUpShowVC
        }
        
        signInContainerShowVC?.handlerForgotPasswordButtonCompletion = { _ in
            self.forgotPasswordShowVC = UIStoryboard(name: "SignInShow", bundle: nil).instantiateViewController(withIdentifier: "ForgotPasswordShowVC") as? ForgotPasswordShowViewController
            
            self.forgotPasswordShowVC?.handlerCancelButtonCompletion = { _ in
                self.activeViewController = self.signInContainerShowVC
            }
            
            self.activeViewController = self.forgotPasswordShowVC
        }
        
        activeViewController = signInContainerShowVC
        
        // Setup App background color theme
        view.applyBackgroundTheme()
    }
    
    // Display logic
    func displaySomething(viewModel: SignInShow.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
    
    
    // MARK: - Gesture
    @IBAction func handlerTapGestureRecognizer(_ sender: UITapGestureRecognizer) {
        view.endEditing(true)
    }
}

//
//  OrganizationMapShowInteractor.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 10.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Interactor component VIP-cicle
protocol OrganizationMapShowInteractorInput {
    func didLoadUserLocation(requestModel: OrganizationMapShowModels.Location.RequestModel)
    func didStopUpdateLocation(requestModel: OrganizationMapShowModels.Location.RequestModel)
}

// MARK: - Output protocols for Presenter component VIP-cicle
protocol OrganizationMapShowInteractorOutput {
    func didPrepareToShowUserLocation(responseModel: OrganizationMapShowModels.Location.ResponseModel)
    func didPrepareToDismissViewController(responseModel: OrganizationMapShowModels.Location.ResponseModel)
}

class OrganizationMapShowInteractor: OrganizationMapShowInteractorInput {
    // MARK: - Properties
    var presenter: OrganizationMapShowInteractorOutput!
    var worker: OrganizationMapShowWorker!
    private let locationManager = LocationManager()
    
    
    // MARK: - Custom Functions. Business logic
    func didLoadUserLocation(requestModel: OrganizationMapShowModels.Location.RequestModel) {
        
        locationManager.startCoreLocation(withSearchLocation: requestModel.searchLocation)
        
        return locationManager.handlerLocationCompletion = { resultLocation in
            let responseModel = OrganizationMapShowModels.Location.ResponseModel(resultLocation: resultLocation)
            self.presenter.didPrepareToShowUserLocation(responseModel: responseModel)
        }
    }
    
    func didStopUpdateLocation(requestModel: OrganizationMapShowModels.Location.RequestModel) {
        worker = OrganizationMapShowWorker()
        worker.stopCoreLocation()
        
        // NOTE: Pass the result to the Presenter
        let responseModel = OrganizationMapShowModels.Location.ResponseModel(resultLocation: nil)
        presenter.didPrepareToDismissViewController(responseModel: responseModel)
    }
}

//
//  OrganizationMapShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 10.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationMapShowViewControllerInput {
    func didShowUserLocation(viewModel: OrganizationMapShowModels.Location.ViewModel)
//    func didDismissViewController(viewModel: OrganizationMapShowModels.Location.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationMapShowViewControllerOutput {
    func didLoadUserLocation(requestModel: OrganizationMapShowModels.Location.RequestModel)
    func didStopUpdateLocation(requestModel: OrganizationMapShowModels.Location.RequestModel)
}

class OrganizationMapShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationMapShowViewControllerOutput!
    var router: OrganizationMapShowRouter!
    
//    private var locationManager: CLLocationManager?

    @IBOutlet weak var mapView: MKMapView! {
        didSet {
            // Delegates
            mapView.delegate = self
            mapView.showsUserLocation = true
        }
    }
    
    @IBOutlet weak var searchTextField: CustomTextField!
    @IBOutlet weak var customNavigationBarView: MainNavigationBarView!
    @IBOutlet weak var spinner: UIActivityIndicatorView!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationMapShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doInitialSetupOnLoad()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        // Stop GeoLocation manager
        let locationRequestModel = OrganizationMapShowModels.Location.RequestModel(searchLocation: SearchLocation(nil, nil))
        interactor.didStopUpdateLocation(requestModel: locationRequestModel)

        super.viewDidDisappear(true)
    }
    
    
    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // Set left bar button image
        customNavigationBarView.leftButton.setImage(UIImage.init(named: "icon-navbar-back-normal"), for: .normal)
        
        // Start GeoLocation manager with current user position
        let requestModel = OrganizationMapShowModels.Location.RequestModel(searchLocation: SearchLocation(nil, nil))
        interactor.didLoadUserLocation(requestModel: requestModel)

//        locationManager = CLLocationManager()
//        locationManager!.delegate = self
//        locationManager!.requestWhenInUseAuthorization()
//        
//        if CLLocationManager.locationServicesEnabled() {
//            locationManager!.desiredAccuracy = kCLLocationAccuracyHundredMeters
//            locationManager!.requestLocation()
//        }


        // Handler left bar button
        customNavigationBarView.handlerNavBarLeftButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
    }
    
    // Centered map view
    private func didCenterOnCurrentPosition(_ mapView: MKMapView, withLocation location: CLLocation) {
        var region = MKCoordinateRegion()
        region.center = location.coordinate
        
        var span = MKCoordinateSpan()
        span.latitudeDelta = 0.05
        span.longitudeDelta = 0.05
        region.span = span
        
        mapView.setRegion(region, animated: true)
    }

    
    // MARK: - Actions
    @IBAction func handlerAddButtonTap(_ sender: CustomButton) {
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        _ = self.navigationController?.popViewController(animated: true)
    }
    
    
    // MAP
    func didShowLocationOnMapViewCenter(coordinate: CLLocationCoordinate2D?) {
        guard coordinate != nil else {
            return
        }
        
        var region = MKCoordinateRegion()
        region.center = coordinate!
        
        var span = MKCoordinateSpan()
        span.latitudeDelta = 0.05
        span.longitudeDelta = 0.05
        region.span = span
        
        mapView.setRegion(region, animated: true)
    }
}


// MARK: - ForgotPasswordShowViewControllerInput
extension OrganizationMapShowViewController: OrganizationMapShowViewControllerInput {
    func didShowUserLocation(viewModel: OrganizationMapShowModels.Location.ViewModel) {
        didShowLocationOnMapViewCenter(coordinate: viewModel.resultLocation?.coordinate)

        spinner.stopAnimating()
    }
    
    func didDismissViewController(viewModel: OrganizationMapShowModels.Location.ViewModel) {
        mapView.showsUserLocation = false
    }
}


// MARK: - MKMapViewDelegate
extension OrganizationMapShowViewController: MKMapViewDelegate {
    func mapViewWillStartLoadingMap(_ mapView: MKMapView) {
        spinner.startAnimating()
    }
    
    func mapViewDidFinishRenderingMap(_ mapView: MKMapView, fullyRendered: Bool) {
        if (fullyRendered) {
            spinner.stopAnimating()
        }
    }
}


// MARK: - CLLocationManagerDelegate
//extension OrganizationMapShowViewController: CLLocationManagerDelegate {
//    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
//        didCenterOnCurrentPosition(mapView, withLocation: locations.last!)
//
//        CLGeocoder().reverseGeocodeLocation(locations.last!) { placemarks, error in
//            guard placemarks != nil else {
//                return
//            }
//            
//            let placemark = placemarks![0]
//        }
//        
//    }
//    
//    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
//        print(object: error)
//    }
//    
//    //
//    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
//        switch status {
//        case .authorizedWhenInUse, . authorizedAlways:
//            mapView?.showsUserLocation = true
//            
//        default:
//            showAlertView(withTitle: "Info", andMessage: "Please go into Settings and give this app authorization to your location.")
//        }
//    }
//}


